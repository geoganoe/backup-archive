#! /bin/bash
# This script implements an archiving back up capability that I have
#   been thinking about for quite a while.  I have been using a
#   similar script except that it had a specific itemized list of
#   folders to be archived and a fixed volume destination folder.
#
# This version provides a start to an equivalent capability that
#   accepts the destination folder as an argument, and uses a config
#   file to specify the list of folders to be backed up segregated
#   by type.

origFldr=$PWD
userNm=${HOME##*/}
bdate=$(date +%Y%m%d)

remPrompt()
{
    echo
    echo "It is best if no processes that change files are running"
    echo "  during the back up operation.  Also, it is a good idea"
    echo "  to clear the cache for browsers and other applications"
    echo "  that may write temporary data to folders that are to"
    echo "  be backed up."
    echo "  "
    echo "  "
}

usage ()
{
    echo "backup-archive must be invoked with a parameter naming the"
    echo "  destination folder, (i. e. -"
    echo "    cmd prompt:~${PWD#$HOME}$ backup-archive dest-folder"
    echo "    where dest-folder is ideally the non-relative folder"
    echo "    name of the destination for the back up)"
    echo
    echo "Also a file named backup-archive.conf must be placed in the"
    echo "  $HOME/.config folder containing the list of"
    echo "  folders that are to be backed up.  The config file has"
    echo "  two categories of folders.  They are [back up only] and"
    echo "  [maintain archive].  It can also have a [base] section"
    echo "  which can specify the base folder that contains the list"
    echo "  of the folders below to be backed up.  The [base] section"
    echo "  must come first if it exists.  If it doesn't exist then"
    echo "  the default is the users HOME folder."
    echo
    echo "The [back up only] folders will typically contain a local"
    echo "  repository that automatically maintains an archive of the"
    echo "  contents of the folder thus making an additional archive"
    echo "  redundant.  However, it may also be used for any folder"
    echo "  the user does not want to keep archived."
    echo
    echo "The [maintain archive] folders list will be backed up and"
    echo "  automatically store the old version of any changed or"
    echo "  deleted files.  Old versions will be stored in folder"
    echo "  ${userNm}-bu-${bdate} of the destination volume"
    echo "  which will be created if needed."
    remPrompt
}

if [ -n "$1" ] && [ -d "$1" ]; then
    destFldr=$1
else
    usage
    exit 1
fi

if [ ! -w "$destFldr" ]; then
    echo "Error: The folder $destFldr is not usable for back up."
    echo
    usage
    exit 1
elif [ -d "$destFldr/$userNm" ] && [ -w "$destFldr/$userNm" ]; then
    echo "The destination is good."
elif [ -d "$destFldr/$userNm" ]; then
    echo "Error: The folder $destFldr/$userNm is not writable."
    echo
    usage
    exit 1
else
    mkdir $destFldr/$userNm
    echo "The user back up folder $destFldr/$userNm was created."
fi

configFile="$HOME/.config/backup-archive.conf"
baseFldr=$HOME
archiveOld=null
declare -a buoFldrs
declare -i buoIndNxt=0
declare -a maFldrs
declare -i maIndNxt=0

echo "Parameter origFldr = $origFldr"
echo "Parameter userNm = $userNm"
echo "Parameter bdate = $bdate"
echo "Parameter destFldr = $destFldr"
echo "Parameter configFile = $configFile"
echo "Parameter baseFldr = $baseFldr"
echo "Parameter archiveOld = $archiveOld"

remPrompt
echo -n "Do you wish to continue? "
read resp1 resp2

echo "resp1 is [$resp1], and resp2 is [$resp2]."

if [ $resp1 == "y" ] || [ $resp1 == "yes" ]; then
    echo
else
    echo "Exiting the backup-archive script as requested"
    exit 1
fi

cd $baseFldr
shopt -s lastpipe

if [ -r $configFile ]; then
    cat $configFile | while read resp1; do
        if [ -n "$resp1" ]; then
            if [ "${resp1:0:1}" == "[" ]; then
                if [ "${resp1:1:12}" == "back up only" ]; then
                    archiveOld=false
                elif [ "${resp1:1:16}" == "maintain archive" ]; then
                    archiveOld=true
                else
                    echo "Error: Unexpected section name in the config file"
                    exit 1
                fi
            else
                if [ -r $resp1 ]; then
                    if [ $archiveOld == true ]; then
                        maFldrs[$((maIndNxt++))]=$resp1
                    else
                        buoFldrs[$((buoIndNxt++))]=$resp1
                    fi
                fi
            fi
        fi
        echo "archiveOld=$archiveOld, maIndNxt=$maIndNxt, buoIndNxt=$buoIndNxt, resp1=[$resp1]"
    done
    echo "Final archiveOld=$archiveOld, maIndNxt=$maIndNxt, buoIndNxt=$buoIndNxt, resp1=[$resp1]"
fi

declare -i ind

# This variable determines whether the rsync commands below will
#   be active or be a dry run.  For a dry run use "in", and for an
#   active run use "iv".  See rsync the man page for the meanings
#   of these options.
ropt1=iv

cd $destFldr
echo
echo "Changed to the destFldr, $destFldr"

echo "These are the $buoIndNxt [back up only] folders"
for (( ind=0 ; buoIndNxt-ind ; ind++ )) ; do
    finalFldr=${buoFldrs[$ind]##*/}
    if [ $finalFldr != ${buoFldrs[$ind]} ]; then
        leadFldrs=${buoFldrs[$ind]%/*}
        if [ -r $baseFldr/$leadFldrs/$finalFldr ]; then
            echo "Running rsync -$ropt1 -aH --delete $baseFldr/$leadFldrs/$finalFldr $userNm/$leadFldrs"
            rsync -$ropt1 -aH --delete $baseFldr/$leadFldrs/$finalFldr $userNm/$leadFldrs
        else
            echo "Requested file $baseFldr/$leadFldrs/$finalFldr is not readable, skipping."
        fi
    else
        if [ -r $baseFldr/$finalFldr ]; then
            echo "Running rsync -$ropt1 -aH --delete $baseFldr/$finalFldr $userNm"
            rsync -$ropt1 -aH --delete $baseFldr/$finalFldr $userNm
        else
            echo "Requested file $baseFldr/$finalFldr is not readable, skipping."
        fi
    fi
done

echo
echo "These are the $maIndNxt [maintain archive] folders"
for (( ind=0 ; maIndNxt-ind ; ind++ )) ; do
    finalFldr=${maFldrs[$ind]##*/}
    if [ $finalFldr != ${maFldrs[$ind]} ]; then
        leadFldrs=${maFldrs[$ind]%/*}
        if [ -r $baseFldr/$leadFldrs/$finalFldr ]; then
            echo "Running rsync -$ropt1 -aH --backup --backup-dir=$destFldr/$userNm-bu-$bdate/$leadFldrs --delete $baseFldr/$leadFldrs/$finalFldr $userNm/$leadFldrs"
            rsync -$ropt1 -aH --backup --backup-dir=$destFldr/$userNm-bu-$bdate/$leadFldrs --delete $baseFldr/$leadFldrs/$finalFldr $userNm/$leadFldrs
        else
            echo "Requested file $baseFldr/$leadFldrs/$finalFldr is not readable, skipping."
        fi
    else
        if [ -r $baseFldr/$finalFldr ]; then
            echo "Running rsync -$ropt1 -aH --backup --backup-dir=$destFldr/$userNm-bu-$bdate --delete $baseFldr/$finalFldr $userNm"
            rsync -$ropt1 -aH --backup --backup-dir=$destFldr/$userNm-bu-$bdate --delete $baseFldr/$finalFldr $userNm
        else
            echo "Requested file $baseFldr/$finalFldr is not readable, skipping."
        fi
    fi
done

cd $origFldr

